# vector 안에 다른 데이터 타입을 넣을때.. 높은 우선순위로 데이터 타입이 맞춰짐.
#
myVar = c(10,20,30,40)
myVar
myVar = c(10,20,30,T)
myVar
myVar = c(10,20,30,TRUE)
myVar
myVar = c(10,'홍길동',30,TRUE)
myVar
as.numeric(myVar)
myVar = "100"
as.numeric(myVar)
mode(myVar)
myVar = "100"
mode(myVar)
mode(as.numeric(myVar))
myVar = "100"
mode(as.numeric(myVar))
myVar = "100"
mode(myVar)
mode(as.numeric(myVar))
mode(as.logical(myVar))
as.logical(myVar)
mode(as.numeric(myVar))
# 간단하게 package를 하나 설치해 보기.
install.packages("ggplot2")
.libPaths()
library(ggplot2)
myVar = c("남자","여자","여자","여자","여자","남자")
qplot(myVar)
ipconfig
mean(myVar)
mean(1,2,3,4,5)
myVar = c(1,2,3,4,5)
mean(c)
myVar = c("남자","여자","여자","여자","여자","남자")
qplot(myVar)
help(mean)
myVar = c(100)
myVar
myVar <- 100
# myVar = c(100) # myVar <- 100
myVar
# vector를 만드는 방법.
# 1. combine함수 이용.
var1 = c(1,2)
var2 = c(3,4)
var3 = c(var1,var2)
# vector를 만드는 방법.
# 1. combine함수 이용.
myVar1 = c(10,20,30)
myVar2 = c(3.14,10,100)
myVar1
myVar2
myVar3 = c(var1,var2)
myVar3 = c(myVar1,myVar2)
myVar3
# vector를 만드는 방법.
# 1. combine함수 이용.
myVar1 = c(10,20,30)
myVar2 = c(3.14,10,100)
myVar3 = c(myVar1,myVar2)
myVar1
myVar2
myVar3
result <- c(myVar1,myVar2)
result
# vector를 만드는 방법.
# 1. combine함수 이용.
myVar1 = c(10,20,30)
myVar2 = c(3.14,10,100)
result <- c(myVar1,myVar2)
myVar1
myVar2
result
# 2. ":" 을 이용한 방식
#수치형 Data에서만 사용 가능. 단조 증가, 단조 감소 형태의 vector를 생성할 때 사용.
myVar = 1:10
myVar
myVar = 8.7:2
myVar
# 2. ":" 을 이용한 방식
#수치형 Data에서만 사용 가능. 단조 증가, 단조 감소 형태의 vector를 생성할 때 사용.
myVar = 1:10 # (start:end) 양쪽 inclusive
myVar
myVar = 8.7:2
myVar
# 3. 2번의 일반형
# sequence 함수 이용
myVar = seq(1,10,2)
# 정식
myVar = seq(from=10,to=3,by=-3)
# 3. 2번의 일반형
# sequence 함수 이용
myVar = seq(1,10,2) # (시작, 끝, 증가치(감소치))
myVar
# 정식
myVar = seq(from=10,to=3,by=-3)
myVar
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1,5)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3,3)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3,times=3)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3,times=3)
myVar
myVar = rep(1:3,each=3)
myVar
myVar.length()
length(myVar)
# vector 요소의 사용(indexing 방식)
myVar = c(3.14,100,"Hello",TRUE,300)
myVar[1]
myVar[6]
myVar[length(myVar)]
result = myVar[2:4]
result
result = myVar[c(2,3,5)]
result
myVar[-1]
myVar[-(3:4)]
myVar[-c(1,4,5)]
# vector 데이터에 이름을 붙여보아요.
myVar = c(10,20,30,40,50)
myVar
names(myVar)
names(myVar) = c("a","b","c","d","e")
names(myVar)
# vector 데이터에 이름을 붙여보아요.
myVar = c(10,20,30,40,50)
myVar
names(myVar)
names(myVar) = c("a","b","c","d","e")
names(myVar)
myVar
myVar["a"]
myVar1 = 1:3
myVar2 = 4:6
myVar1 + myVar2
myVar3 = 1:6
result = myVar1 + myVar3
result
result = myVar1       +  myVar3
#        1 2 3 1 2 3    1 2 3 4 5 6
result
# vector에 대한 집합연산 (합집합, 교집합, 차집합)
var1 = 1:5
var2 = 3:7
#합집합
union(var1,var2)
intersect(var1.var2)
intersect(var1,var2)
setdiff(var1,var2)
var1 <- matrix(c(2:5))
var1
var1
var1 <- matrix(c(1:5))
var1
var <= matrix(c(1:10),nrow = 2)
var1
var <= matrix(c(1:10),nrow = 4)
var <= matrix(c(1:10),nrow = 2)
var1
var1 <= matrix(c(1:10),nrow = 2)
var1 <= matrix(c(1:10),nrow=2)
var1 <= matrix(c(1:10),nrow=2)
var1 <= matrix(c(1:10),nrow=2)
var1 <- matrix(c(1:10),nrow=2)
var1
var1 <- matrix(c(1:11),nrow=2)
var1
var1 <- matrix(c(1:10), nrow = 2, byrow = TRUE)
var1
var1= 1:4
var2= 5:8
mat1 = rbind(var1,var2)
mat1
mat1 = cbind(var1,var2)
mat1
############################################################################
var <- matrix(c(1:10),nrow=2, byrow = TRUE)
var[1,4]
var
var
var[1,4]
var[,4]
var[1,]
length(var)
nrow(var)
ncol(var)
var1 <- array(c(1:24))
var1
var1 <- array(c(1:24), dim = 2)
var1
var1 <- array(c(1:24), dim = c(3,2,4))
var1
var1 <- array(c(1:24), dim = c(3,2,4), dimnames = "123")
var1 <- c("A","B","AB","O","A","AB")
var1_factor <- factor(var1)
var1_factor
levels(var1)
levels(var1_factor)
var1 <- c("A","B","AB","O","A","AB")
var1_factor <- factor(var1)
var1_factor <- factor(var1)
var1 <- c("A","B","AB","O","A","AB")
var1_factor <- factor(var1,levels = c("A","B","O"))
var1_factor
var1_factor <- factor(var1,levels = c("A","B","O"), ordered = TRUE)
var1_factor
var1_factor <- factor(var1,levels = c("A","B","O","AB"), ordered = TRUE)
var1_factor
var1_scalar = 100
var2_vector = c(10,20,30)
var3_matrix = matrix(c(1:6), nrow = 3)
var1_scalar = 100
var2_vector = c(10,20,30)
var3_matrix = matrix(c(1:6), nrow = 3)
myList = list(var1_scalar,var2_vector,var3_matrix)
myList
myList[[2]]
myList[[2]][1]
myList[[3]][1,1]
myList[[3]][1,3]
myList[[3]][,2]
# 전형적인 방식의 리스트 생성.
myList <- list(name=c("홍길동","김길동"),
age=c("20","30"),
gender=c("남자","여자"))
myList
myList[age]
myList[$age]
myList[$age]
myList$age
myList$age
myList$age
myList[[2]]
myList[["age"]]
df = data.frame(NO=c(1,2,3),
Name=c("홍길동","이순신","강감찬"),
Age=c(20,30,40))# 컬럼명 = 값 형태로 저장.
df
View(df)
#내가 원하는 column만 보기.
df$Name
#내가 원하는 column만 보기.
df$No
#내가 원하는 column만 보기.
df$NO
#내가 원하는 column만 보기.
df$Age
#내가 원하는 column만 보기.
df$Age
df$Name
df = data.frame(NO=c(1,2,3),
Name=c("홍길동","이순신","강감찬"),
Age=c(20,30,40),
stringsAsFactors=FALSE)# 컬럼명 = 값 형태로 저장.
df$Name
df <- data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"))
df
df <- data.frame(x=c(1:5),
y=seq(2,10,2),
z=c("a","b","c","d","e"),
stringsAsFactors = FALSE)
subset(df,x>=3)
subset1 <- subset(df,x>=3)
subset2 <- subset(df,x>=3&y<=8)
subset2
subset1
subset2
# 1. 4,5,6,7,8,10,3 의 숫자를 이용해서 숫자벡터 x를 생성하기.
x = c(4,5,6,7,8,10,3)
# 1. 4,5,7,8,10,3 의 숫자를 이용해서 숫자벡터 x를 생성하기.
x = c(4,5,7,8,10,3)
# 1. 4,5,7,8,10,3 의 숫자를 이용해서 숫자벡터 x를 생성하기.
x <- c(4,5,7,8,10,3)
# 1. 4,5,7,8,10,3 의 숫자를 이용해서 숫자벡터 x를 생성하기.
x <- c(4,5,7,8,10,3)
x
print(x)
x1 <- c(3,5,7,9)
x2 <- c(3,5,3)
x1 + x2 # recycle rule 적용되어 계산.
Age <- c(22,25,18,20)
Age <- c(22,25,18,20)
Name <- c("홍","최","박","홍")
Age <- c(22,25,18,20)
Name <- c("홍","최","박","홍")
Gender <- c("남",'여','남','여')
Gender <- c("M",'F','M','F')
# 1) 위의 3개의 vector를 이용하여 df 를 만들기.
df <- data.frame(Age=Age,Name=Name,Gender=Gender)
df
# 2) subset을 이용해 다음의 결과를 출력
## Age Nage Gender
## 22   홍   M
## 18   박   M
subset1 <- subset(df,Gender=="M")
subset1
df
subset1
# 1) 위의 3개의 vector를 이용하여 df 를 만들기.
df <- data.frame(Age=Age,
Name=Name,
Gender=Gender,
stringsAsFactors = FALSE)
subset2 <- subset(df,Gender!="F")
subset2
# 4. 다음의 R코드를 실행시킨 결과는? (Boolean indexing)
x <- c(2,4,6,8)
# 4. 다음의 R코드를 실행시킨 결과는? (Boolean indexing)
x <- c(2,4,6,8)
y <- c(T,F,T,F)
y <- c(TRUE,FALSE,TRUE,FALSE)
# 4. 다음의 R코드를 실행시킨 결과는? (Boolean indexing)
x <- c(2,4,6,8)
y <- c(TRUE,FALSE,TRUE,FALSE)
x[y]
# 전제조건 : size 같아야함.
# 해당위치의 TRUE만 남기고 버림.
x
x[c(1,2,4)]
sum(x)
sum(x[y])
# 5. 아래의 계산결과는?
x <- c(1:4)
# 5. 아래의 계산결과는?
x <- c(1:4)
(x+2)[(!is.na(x))& x>2] -> k
k
is.na(x)
(!is.na(x))& x>2
# 6. 결측치 (missing value) => NA
x <- c(10,20,30,NA,40,50,60,NA,NA,100)
# vector 안에있는 NA 갯수 출력
is.na(x)
# vector 안에있는 NA 갯수 출력
x[!is.na(x)].length()
# vector 안에있는 NA 갯수 출력
length(x[!is.na(x)])
# vector 안에있는 NA 갯수 출력
length(x[is.na(x)])
# vector 안에있는 NA 갯수 출력
sum(is.na(x))
max(is.na(x))
View(x)
install.packages("stringr")
# 2. package loading
library(stringr)
# 3. 문자열(character)하나 준비.
myStr= "Honkd1051Leess4504YOU25홍길동1004"
str_length(myStr)
# 3. 문자열(character)하나 준비.
myStr= "Honkgd1051Leess4504YOU25홍길동1004"
str_length(myStr)
str_locate(myStr,"Lee")
str_locate(myStr,"0")
str_locate_all(myStr,"0")
str_locate(myStr,"Lee")
str_locate(myStr,"0")
str_locate_all(myStr,"0")
# 부분문자열
str_sub(myStr,2,5)
# 대소문자
str_to_upper(myStr)
str_to_lower(myStr)
# 문자열 교체
str_replace(myStr,"홍길동","신사임당")
# 문자열 결합
str_c(myStr,"1234")
myStr= "Honkgd105,1Leess4504,YOU25,홍길동1004"
str_split(myStr,",")
myStr= "Honkgd105,1Leess4504,YOU25,홍길동1004"
myStr= "Honkgd105,1Leess4504,YOU25,홍길동1004"
myStr= "Honkgd105,1Leess4504,YOU25,홍길동1004"
str_extract_all(myStr."[a-z]") #대괄호 : [] 안에 나오는 문자중 한개
str_extract_all(myStr,"[a-z]") #대괄호 : [] 안에 나오는 문자중 한개
str_extract_all(myStr,"{[a-z]{3}") #대괄호 : [] 안에 나오는 문자중 한개
str_extract_all(myStr,"[a-z]{3}") #대괄호 : [] 안에 나오는 문자중 한개
str_extract_all(myStr,"[0-9]")
str_extract_all(myStr,"[A-Z]")
str_extract_all(myStr,"[ㄱ-ㅎㅎ]")
str_extract_all(myStr,"[ㄱ-ㅎ]")
str_extract_all(myStr,"[ko]")
str_extract_all(myStr,"[a-z]{3,}")
str_extract_all(myStr,"[a-z]{3}") #대괄호 : [] 안에 나오는 문자중 한개
str_extract_all(myStr,"[a-z]{3,}")
str_extract_all(myStr,"[a-z]{3,4}")
str_extract_all(myStr,"[a-z]{3,5}")
str_extract_all(myStr,"[a-z]{,3}")
str_extract_all(myStr,"[ㄱ-ㅎ]{3}")
str_extract_all(myStr,"[가-힣힣]{3}")
str_extract_all(myStr,"[가-힣]{3}")
str_extract_all(myStr,"[0-9]{4}")
str_extract_all(myStr,"[a-z]{3}") #대괄호 : [] 안에 나오는 문자중 한개
str_extract_all(myStr,"[a-z]{3,}") # onkgd eess
str_extract_all(myStr,"[a-z]{3,4}") # onkg eess
str_extract_all(myStr,"[가-힣]{3}")
str_extract_all(myStr,"[0-9]{4}")
str_extract_all(myStr,"[^a-z]{3}")
str_extract_all(myStr,"!([0-9]&[a-z]&[A-Z]&[가-힣])")
str_extract_all(myStr,"[0-9]&[a-z]&[A-Z]&[가-힣]")
str_extract_all(myStr,"[0-9]&&[a-z]")
str_extract_all(myStr,"[0-9]")
str_extract_all(myStr,"[0-9]"&"[a-z]")
str_extract_all(myStr,"[0-9][a-z]")
str_extract_all(myStr,"[0-9]")
myNum = scan()
myNum = scan() # 숫자만 가능함.
myNum = scan() # 숫자만 가능함.
myNum
myNum = scan() # 숫자만 가능함.
myNum
myData = scan(what = character())
myData
myNum = scan() # 숫자만 가능함.
myData
myNum = scan() # 숫자만 가능함.
myNum
myData = scan(what = character())
myData
df = data.frame()
my_df = edit(df)
my_df = edit(df)
my_df
df <- read.table("data/student_midterm.txt",
sep = ",")
df <- read.table("data/student_midterm.txt",
sep = ",")
df
df <- read.table("data/student_midterm.txt",
seq = ",",
header = TRUE)
df <- read.table("data/student_midterm.txt",
sep = ",",
header = TRUE)
df <- read.table("data/student_midterm.txt",
sep = ",",
header = TRUE
fileEncoding = "UTF-8")
df <- read.table("data/student_midterm.txt",
sep = ",",
header = TRUE,
fileEncoding = "UTF-8")
df
df <- read.table(file.choose(),
sep = ",",
header = TRUE,
fileEncoding = "UTF-8")
df
df <- read.table(file.choose(),
sep = ",",
header = TRUE,
fileEncoding = "UTF-8")
df
df <- read.table(file.choose(),
sep = ",",
header = TRUE,
fileEncoding = "UTF-8")
df
df <- read.table(file.choose(),
sep = ",",
header = TRUE,
fileEncoding = "UTF-8",
na.Strings = "-")
df <- read.table(file.choose(),
sep = ",",
header = TRUE,
fileEncoding = "UTF-8",
na.strings = "-")
df
# R 에서 CSV 파일형식 읽기.
# read.table() 과 거의 유사함.
# `header=TRUE` 가 default로 잡혀있다.
# sep="," dafault
read.csv(file.choose(),
fileEncoding = "UTF-8")
xlsx
install.packages("xlsx")
library(xlsx)
df <- read.xlsx(file.choose(),
sheetIndex = 1,
encoding = "UTF-8")
df
class(df)
write.table(df,
file = "data/result.csv")
write.table(df,
file = "data/result.csv",
row.names = FALSE)
write.table(df,
file = "data/result.csv",
row.names = FALSE,
quote = FALSE)
exit
q()
