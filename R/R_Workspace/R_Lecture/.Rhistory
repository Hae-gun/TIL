# R의 주석은 #을 이용하세요!!
#여러줄 주석 설정은 ctrl + shift + c
# 홍길동
# a=100
# 최길동
a = 100
# R의 주석은 #을 이용하세요!!
#여러줄 주석 설정은 ctrl + shift + c
# 홍길동
# a=100
# 최길동
a = 100
a = 100
a = 100
b=200
100
b = 200
a+b
c = a+b
c
# R의 주석은 #을 이용하세요!!
# 여러줄 주석 설정은 ctrl + shift + c
# 홍길동
# a=100
# 최길동
# case-sensitive(대소문자 구분)
# 여러 단어 사용시 camel-case notation 사용.
# 변수 선언과 사칙연산
a=100;b=200
a <- 100
200 -> a
# R의 주석은 #을 이용하세요!!
# 여러줄 주석 설정은 ctrl + shift + c
# 홍길동
# a=100
# 최길동
# case-sensitive(대소문자 구분)
# 여러 단어 사용시 camel-case notation 사용.
# 변수 선언과 사칙연산
a=100
a <- 150
200 -> a
# 데이터 타입과
myVar <- 100
result = myVar + 200
result
print(result)
print(result,myVar)
print(result+myVar)
print("result")
print(result,myVar)
cat(result,myVar)
cat("결과값은: ",result,myVar)
cat("결과값은: ",result+myVar)
cat("결과값은: \n",result+myVar)
cat("결과값은: \n",result,myVar)
cat("결과값은: \n",result,myVar,file="C:/R_Workspace/R_Lecture/test.txt")
cat("결과값은: \n",result,myVar,file="C:/R_Workspace/R_Lecture/test.txt",append=TRUE)
cat("\n결과값은: \n",result,myVar,file="C:/R_Workspace/R_Lecture/test.txt",append=TRUE)
cat("\n결과값은: \n",result,myVar,file="C:/R_Workspace/R_Lecture/test.txt",append=TRUE)
cat("\n결과값은: \n",result,myVar,file="C:/R_Workspace/R_Lecture/test.txt",append=TRUE)
cat("\n결과값은: \n",result,myVar,file="C:/R_Workspace/R_Lecture/test.txt",append=TRUE)
cat("\n결과값은: \n",result,myVar,file="C:/R_Workspace/R_Lecture/test.txt",append=TRUE)
# 연산자 : 기본적인 연산자는 다른 언어와 상당히 유사하다.
#
var1 <- 100
var2 <- 3
a
b
a
# 연산자 : 기본적인 연산자는 다른 언어와 상당히 유사하다.
#
var1 <- 100
var2 <- 3
result <- var1 / var2
result
options(digits = 5)
result
# c와 java처럼 format을 이용한 출력도 가능.
sprintf(".8f",result)
# c와 java처럼 format을 이용한 출력도 가능.
sprintf("%.8f",result)
# c와 java처럼 format을 이용한 출력도 가능.
sprintf("%.-8f",result)
# c와 java처럼 format을 이용한 출력도 가능.
sprintf("%.-2f",result)
# c와 java처럼 format을 이용한 출력도 가능.
sprintf("%.8f",result)
var1
var2
result = var %/% var2
result = var1 %/% var2
result = var1 % var2
result = var1 %% var2
result = var1 %/% var2
result
result = var1 %% var2
result
var1 <- 100
var2 <- 200
var1 == var2
var1 != var2
TRUE & TRUE
source('C:/R_Workspace/R_Lecture/chapter_01.R', encoding = 'UTF-8', echo=TRUE)
TRUE && TRUE
TRUE & TRUE
TRUE & FALSE
TRUE && FALSE
# combine 함수를 이용해서 vector를 생성 => c()
var3 <- c(TRUE,FALSE)
# combine 함수를 이용해서 vector를 생성 => c()
c(TRUE,FALSE) && c(TRUE,TRUE)
# combine 함수를 이용해서 vector를 생성 => c()
c(TRUE,FALSE) & c(TRUE,TRUE)
# combine 함수를 이용해서 vector를 생성 => c()
c(TRUE,FALSE) & c(TRUE,TRUE)
c(TRUE,FALSE) && c(TRUE,TRUE)
c(TRUE,FALSE) && c(F,TRUE)
c(TRUE,FALSE) && c(T,TRUE)
source('C:/R_Workspace/R_Lecture/chapter_01.R', encoding = 'UTF-8', echo=TRUE)
c(TRUE,FALSE) && c(TRUE,TRUE)
c(TRUE,FALSE) & c(TRUE,TRUE,FALSE)
c(TRUE,FALSE) && c(TRUE,TRUE,FALSE)
# 기본적으로 사용하는 함수들.
abs(-3)
sqrt(5)
factorial(3)
# 1. numeric(수치형) : 정수와 실수를 구분하지 않는다.
#     100, 100.3, 10 : 실수 10L : 정수(영문자L)
# 2. character(문자열) : 모든 글자는 싹다 문자열 '' "" 혼용가능.
var='홍길동동'
# 1. numeric(수치형) : 정수와 실수를 구분하지 않는다.
#     100, 100.3, 10 : 실수 10L : 정수(영문자L)
# 2. character(문자열) : 모든 글자는 싹다 문자열 '' "" 혼용가능.
var='홍길동'
var='홍길동'
# 1. numeric(수치형) : 정수와 실수를 구분하지 않는다.
#     100, 100.3, 10 : 실수 10L : 정수(영문자L)
# 2. character(문자열) : 모든 글자는 싹다 문자열 '' "" 혼용가능. JS와 동일
var='홍길동'
sqrt(-3)
# 4. Inf (Infinite) : 양의 무한대
3/0
3/0
# 4. Inf (Infinite) : 양의 무한대
-3/0
# 4. Inf (Infinite) : 양의 무한대
3/0
var1<-100
mode(var1)
mode(var1)
var1<-TURE
mode(va
var1<-TURE
var1<-TURE
var1<-TRUE
mode(var1)
var1<-1+3i
mode(var1)
var1<-i
mode(var1)
var1<-'i'
mode(var1)
var1<-InF
var1<-InF
var1<-3/0
mode(var1)
var1<-100
mode(var1)
# is 계열의 함수
var2 = 300
is.numeric(var2)
is.finite(var2)
is.finite(3/0)
is.double(var2)
is.integer(var2)
# is 계열의 함수
var2 = 300
is.numeric(var2)
is.double(var2)
is.integer(var2)
# 데이터 타입의 우선순위
123+"뮻"
# 데이터 타입의 우선순위
# character > complex > numeric >logical
# 기본적으로 사용되는 자료구조가 vector
# vector 안에 다른 데이터 타입을 넣을때.. 높은 우선순위로 데이터 타입이 맞춰짐.
#
myVar = c(10,20,30,40)
myVar
is.numeric(myVar)
myVar[2]
myVar = c(10,20,30,FALSE)
mode(myVar[4])
myVar[4]
myVar = c(10,20,30,T)
myVar[4]
myVar
# 데이터 타입의 우선순위
# character > complex > numeric >logical
# 기본적으로 사용되는 자료구조가 vector
# vector 안에 다른 데이터 타입을 넣을때.. 높은 우선순위로 데이터 타입이 맞춰짐.
#
myVar = c(10,20,30,40)
myVar
myVar = c(10,20,30,T)
myVar
myVar = c(10,20,30,TRUE)
myVar
myVar = c(10,'홍길동',30,TRUE)
myVar
as.numeric(myVar)
myVar = "100"
as.numeric(myVar)
mode(myVar)
myVar = "100"
mode(myVar)
mode(as.numeric(myVar))
myVar = "100"
mode(as.numeric(myVar))
myVar = "100"
mode(myVar)
mode(as.numeric(myVar))
mode(as.logical(myVar))
as.logical(myVar)
mode(as.numeric(myVar))
# 간단하게 package를 하나 설치해 보기.
install.packages("ggplot2")
.libPaths()
library(ggplot2)
myVar = c("남자","여자","여자","여자","여자","남자")
qplot(myVar)
ipconfig
mean(myVar)
mean(1,2,3,4,5)
myVar = c(1,2,3,4,5)
mean(c)
myVar = c("남자","여자","여자","여자","여자","남자")
qplot(myVar)
help(mean)
myVar = c(100)
myVar
myVar <- 100
# myVar = c(100) # myVar <- 100
myVar
# vector를 만드는 방법.
# 1. combine함수 이용.
var1 = c(1,2)
var2 = c(3,4)
var3 = c(var1,var2)
# vector를 만드는 방법.
# 1. combine함수 이용.
myVar1 = c(10,20,30)
myVar2 = c(3.14,10,100)
myVar1
myVar2
myVar3 = c(var1,var2)
myVar3 = c(myVar1,myVar2)
myVar3
# vector를 만드는 방법.
# 1. combine함수 이용.
myVar1 = c(10,20,30)
myVar2 = c(3.14,10,100)
myVar3 = c(myVar1,myVar2)
myVar1
myVar2
myVar3
result <- c(myVar1,myVar2)
result
# vector를 만드는 방법.
# 1. combine함수 이용.
myVar1 = c(10,20,30)
myVar2 = c(3.14,10,100)
result <- c(myVar1,myVar2)
myVar1
myVar2
result
# 2. ":" 을 이용한 방식
#수치형 Data에서만 사용 가능. 단조 증가, 단조 감소 형태의 vector를 생성할 때 사용.
myVar = 1:10
myVar
myVar = 8.7:2
myVar
# 2. ":" 을 이용한 방식
#수치형 Data에서만 사용 가능. 단조 증가, 단조 감소 형태의 vector를 생성할 때 사용.
myVar = 1:10 # (start:end) 양쪽 inclusive
myVar
myVar = 8.7:2
myVar
# 3. 2번의 일반형
# sequence 함수 이용
myVar = seq(1,10,2)
# 정식
myVar = seq(from=10,to=3,by=-3)
# 3. 2번의 일반형
# sequence 함수 이용
myVar = seq(1,10,2) # (시작, 끝, 증가치(감소치))
myVar
# 정식
myVar = seq(from=10,to=3,by=-3)
myVar
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1,5)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3,3)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3,times=3)
# 4. 반복적인 값을 이용해서 vector를 생성
#     rep()
myVar = rep(1:3,times=3)
myVar
myVar = rep(1:3,each=3)
myVar
myVar.length()
length(myVar)
# vector 요소의 사용(indexing 방식)
myVar = c(3.14,100,"Hello",TRUE,300)
myVar[1]
myVar[6]
myVar[length(myVar)]
result = myVar[2:4]
result
result = myVar[c(2,3,5)]
result
myVar[-1]
myVar[-(3:4)]
myVar[-c(1,4,5)]
# vector 데이터에 이름을 붙여보아요.
myVar = c(10,20,30,40,50)
myVar
names(myVar)
names(myVar) = c("a","b","c","d","e")
names(myVar)
# vector 데이터에 이름을 붙여보아요.
myVar = c(10,20,30,40,50)
myVar
names(myVar)
names(myVar) = c("a","b","c","d","e")
names(myVar)
myVar
myVar["a"]
myVar1 = 1:3
myVar2 = 4:6
myVar1 + myVar2
myVar3 = 1:6
result = myVar1 + myVar3
result
result = myVar1       +  myVar3
#        1 2 3 1 2 3    1 2 3 4 5 6
result
# vector에 대한 집합연산 (합집합, 교집합, 차집합)
var1 = 1:5
var2 = 3:7
#합집합
union(var1,var2)
intersect(var1.var2)
intersect(var1,var2)
setdiff(var1,var2)
